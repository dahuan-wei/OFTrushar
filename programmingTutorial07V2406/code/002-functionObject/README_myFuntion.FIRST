Tut7: Implementing new  thermophysical model function objects, fvOptions


fectch the themoPhycialPropetyies libray out of the scr folder, compile them.

Tut7.2 :new   function objects

1. initial prepare for project structure:
    Copy forces folder 
        /home/huanix/OpenFOAM/OpenFOAM-v2406/src/functionObjects/forces 
    to personal poject root:
        /home/huanix/OpenFOAM/huanix-v2406/run/programmingTutorial07V2406/code/002-functionObject/forces
    and rename forces as myFunctionObject
    then  rename all the string "forces" as "myFunctionObject" no matter for  folder name or contents in Make/files,Make/options

            ct/myFunctionObject$ tree
        .
        ├── Make
        │   ├── files
        │   ├── linux64GccDPInt32Opt
        │   │   ├── myFunctionObject
        │   │   │   ├── myFunctionObject.C.dep
        │   │   │   └── myFunctionObject.o
        │   │   ├── options
        │   │   ├── sourceFiles
        │   │   └── variables
        │   └── options
        ├── doc
        │   └── forcesFunctionObjectsDoc.H
        ├── forceCoeffs
        │   ├── forceCoeffs.C
        │   └── forceCoeffs.H
        ├── lnInclude
        │   ├── forceCoeffs.C -> ../forceCoeffs/forceCoeffs.C
        │   ├── forceCoeffs.H -> ../forceCoeffs/forceCoeffs.H
        │   ├── forcesFunctionObjectsDoc.H -> ../doc/forcesFunctionObjectsDoc.H
        │   ├── myFunctionObject.C -> ../myFunctionObject/myFunctionObject.C
        │   ├── myFunctionObject.H -> ../myFunctionObject/myFunctionObject.H
        │   ├── propellerInfo.C -> ../propellerInfo/propellerInfo.C
        │   └── propellerInfo.H -> ../propellerInfo/propellerInfo.H
        ├── myFunctionObject
        │   ├── myFunctionObject.C
        │   └── myFunctionObject.H
        └── propellerInfo
            ├── propellerInfo.C
            └── propellerInfo.H
2. compile the code.
3. testcase in cavityMyFucntion:
    you can find template of how to set proper forces functions used in controlDict via searching(in tut/incompressible folder) 
    grep -r forces


    here is a eample:   

        functions
        {
            forces
                {
                    // type          forces;
                    type          myFunctionObject;

                    
                    libs          (libmyFunctionObject.so);

                    writeControl  timeStep;
                    timeInterval  1;

                    patches       (movingWall);
                    rho           rhoInf;     // Indicates incompressible
                    log           true;
                    rhoInf        1;          // Redundant for incompressible

                    CofR          (0 0 0);    // Rotation around centre line of propeller
                    pitchAxis     (0 1 0);
                }

        }
4. run the test case; finito


正确流程是：

先把改动暂存（stage）
如果你想把所有改动都提交，运行：

bash
Copy
Edit
git add .
或者只暂存某个目录／文件：

bash
Copy
Edit
git add programmingTutorial07V2406
再提交（commit）

bash
Copy
Edit
git commit -m "this is the exercise for build user custom function and thermal model"
最后推送到远程

bash
Copy
Edit
git push
这样才能把本地的修改真正写进 Git 历史，并同步到 GitHub。

7. 3 new fvOptions

1. initial prepare for project structure:
    copy laplacianFoam from
     /home/huanix/OpenFOAM/OpenFOAM-v2406/applications/solvers/basic/laplacianFoam
    to project root 
    /home/huanix/OpenFOAM/huanix-v2406/run/programmingTutorial07V2406/code/003-fvOptions/laplacianFoam   
    and rename laplacianFoam as myLaplacianDynamicSourceFoam 
    then  rename  "laplacianFoam" as "myLaplacianDynamicSourceFoam" in Make/files,Make/option
2.change the myLaplacianDynamicSourceFoam.C as:

                fvm::ddt(T) - fvm::laplacian(DT, T)
             ==
                fvOptions(T)
3. compile
4. run testcase:003-fvOption

about:
                fvm::ddt(T) - fvm::laplacian(DT, T)
             ==
                fvOptions(T)
this code to  tell OpenFOAM to do three things in each time step:

Transient term: fvm::ddt(T) assembles the time‐derivative ∂T/∂t.

Diffusion term: - fvm::laplacian(DT, T) adds the usual conductive/diffusive flux ∇·(DT∇T).

Source term from fvOptions: fvOptions(T) reads all of the entries you’ve defined in your system/fvOptions dictionary
 and injects them as right‐hand‐side source terms into the temperature equation.


What actually happens under the hood?
When your solver starts, it includes and constructs an fvOptions object, which parses the system/fvOptions file.

Each entry in that file (e.g. a heat injection zone, a cooling sink, a porous‐media block, 
or any custom source you’ve coded and registered) becomes an instance of an fvOption subclass.

On every time step, before solving the equation, the solver calls options.updateCoeffs().
That computes the current source strength for each cell (which can depend on time, temperature, position, etc.).

When you write fvOptions(T), it returns the accumulated source‐term field, which is added into the linear system for T exactly like any other explicit source term.

Why use fvOptions?
No need to modify your solver’s C++ code each time you want to add or tweak a source term.

You can turn sources on/off, change their magnitude, or confine them to specific cellZones or cellSets, simply by editing system/fvOptions.

It supports a wide range of built‐in types (porous media resistance, explicit/implicit sources, momentum sources, scalar sources, etc.) and even your own custom fvOption plugins.

In short, fvOptions(T) makes your temperature equation automatically include whatever “extra physics” you’ve defined in the fvOptions dictionary,
 keeping your solver code clean and highly configurable.
